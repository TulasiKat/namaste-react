we need not keep track of node_modules. but need to track package.json and package-lock.json


if we have package.json and package-lock.json, we can recreate the node modules. so we need not track the node_modules. even we can delete the node_moduesl. they will be recreated.
for this we can write nom install in terminal and it recreates the node modules.


=> npx parcel index.html -> for hosting our app on sever.

npx : just like we have npm, similarly we have npx. 
npx means executing a package.
npm is for installing and npx is for executing.


why creating it by npm ctaerte-react app is preferred than using the cdn links?
1. using thriugh cdn links is a costly operation. as we will have react already in our node modukles, we need not call the api and get react speratel.y
2. as versions of react changes, we should keep changing the url everytime.

command to add react : npm install react.
we are not writing it as npm install -D react, because we need it as a normal deoendency, not as a dev dependency.


#parcel:
-- dev build
-- local server
-- hmr - hot module replacement. (because of this only, the page will be automatically reloaded when we change / modify anything).
-- parcel uses a file watching algorithm, which is written in c++, becaus eof which hmr is happening.
-- parcel gives us fastre build becaus eof caching
-- where it is caching things? maintains .parcel-cache files
-- it also does image optimisation
-- minification of our file
-- bundling
-- compress our files
-- consistent hashing 
-- code splitting
-- differential bundling - to suppport older browsers
-- give option of hosting on https also
-- parcel.org is the site
-- tree shaking - remove unused code for us
-- it creates dev and production bundles seperately
-- can add browsers list where our app can run





Chapter 02 - Assignment - Igniting our App
Please Note: Write the answers and code on your own while finishing your assignments. Try to
put down your thoughts into words by yourself in your own words. (This will help you develop
muscle memory and you will remember all the concepts properly) ✌
# Theory Assignment:
● - What is `NPM`?
doesnot stand for node package manager, but yes it has many packages inside it, which can be used in our project.
● - What is `Parcel/Webpack`? Why do we need it?
parcel is one of the best opackages which can be installed from npm. it does many things to our project like - 
-- dev build
-- local server
-- hmr - hot module replacement. (because of this only, the page will be automatically reloaded when we change / modify anything).
-- parcel uses a file watching algorithm, which is written in c++, becaus eof which hmr is happening.
-- parcel gives us fastre build becaus eof caching
-- where it is caching things? maintains .parcel-cache files
-- it also does image optimisation
-- minification of our file
-- bundling
-- compress our files
-- consistent hashing 
-- code splitting
-- differential bundling - to suppport older browsers
-- give option of hosting on https also
-- parcel.org is the site
-- tree shaking - remove unused code for us
-- it creates dev and production bundles seperately
-- can add browsers list where our app can run
● - What is `.parcel-cache`
when ever we run build, it creates  partial cache folders, so that the build time decreases becaus eof caching.
● - What is `npx` ?
while nom is used for installing a package, npx command is used to execute a package.
● - What is difference between `dependencies` vs `devDependencies`

● - What is Tree Shaking?
● - What is Hot Module Replacement?
the build will be done automaticallky when ever we make any change in our files. we need not start server gain and again after every change we make.
● - List down your favourite 5 superpowers of Parcel and describe any 3 of them in your
own words.
● - What is `.gitignore`? What should we add and not add into it?
all the files/folders which can be regenerated can be added inside .gitignore because they need not be be tracked by git.
● - What is the difference between `package.json` and `package-lock.json`
packag.json can have the approximate versions but the package-lock.json will have the exact versions of all the packages installed.
● - Why should I not modify `package-lock.json`?
● - What is `node_modules` ? Is it a good idea to push that on git?
when ever we indtall a package, all teh dependency paclages will also be installed and kept under node_modules folder. we should add this inside .gitignore because they can be regenerated if the package.json and package-l;ock.json files are present.
● - What is the `dist` folder?
this contains the minimized/optimised version of our code which is ready for production.
● - What is `browserlists`
we can mention on which devices our project can work., this doesnot mean it will not work on other browsers. it might or mightnot work on otehr browsers. but it will definitely work on the mentioned browsers list.

Read about dif bundlers: vite, webpack, parcel
● Read about: ^ - caret and ~ - tilda
● Read about Script types in html (MDN Docs)
# Project Assignment:
- In your existing project
● - intialize `npm` into your repo
● - install `react` and `react-dom`
● - remove CDN links of react
● - install parcel
● - ignite your app with parcel
● - add scripts for “start” and “build” with parcel commands
● - add `.gitignore` file
● - add `browserlists`
● - build a production version of your code using `parcel build`
# References
● Creating your own create-react-app
● Parcel Documentation
● Parcel on Production
● BrowsersList: https://browserslist.dev/



#akshay's notes
Igniting Our App! ( Namaste-React ) 1
🚀
Igniting Our App! (
Namaste-React )
💡 Please make sure to follow along with the whole ”Namaste
React" series, starting from Episode-1 and continuing
through each subsequent episode. The notes are designed
to provide detailed explanations of each concept along
with examples to ensure thorough understanding. Each
episode builds upon the knowledge gained from the
previous ones, so starting from the beginning will give
you a comprehensive understanding of React development.
💡 I've got a quick tip for you. To get the most out of
these notes, it's a good idea to watch Episode-2 first.
Understanding what ”Akshay” shares in the video will make
these notes way easier to understand. 
Igniting Our App! ( Namaste-React ) 2
So far, here’s what we have learned in the
previous episode.
We studied about Libraries, Frameworks, their
differences.
We have also created Hello World! using HTML,
JavaScript, and React.
We have also studies about what is Emmet, CORS
(Cross Origin)
Igniting Our App.
Q ) To make our app production ready what should we do?
Minify our file (Remove console logs, bundle things up)
Need a server to run things
📢 NOTE: Minify —> Optimization —>Clean console —> Bundle
* Bundlers:
A bundler is a tool that bundles our app, packages our app so
that it can be shipped to production.
Examples of Bundlers:
Igniting Our App! ( Namaste-React ) 3
Webpack
Vite
Parcel
📢 NOTE: In create-react-app, the bundler used is webpack.
* Package Manager:
Bundlers are packages. If we want to use a package in our
code, we have to use a package manager.
We use a package manager known as npm or yarn
* Configuring the Project:
npm init
It creates a package.json file.
Now to install parcel we will do:
npm install -D parcel
Now we will get a package-lock.json file.
* package.json:
Package.json file is a configuration for NPM. Whatever
packages our project needs, we install those packages using
npm install <packageName>.
Igniting Our App! ( Namaste-React ) 4
Once package installation is complete, their versions and
configuration related information is stored as dependencies
inside package.json file.
* package-lock.json:
Package-lock.json locks the exact version of packages being
used in the project.
Q ) What is difference between package.json and
package.lock.json?
In package. json we have information about generic version
of installed packages whereas in package.lock.json we have
information about the specific or exact version of
installed packages.
* node_modules:
Which gets installed is like a database for the npm.
Every dependency in node_module will have its package.json.
Node modules are very heavy so we should always put this in
git ignore.
📢 NOTE: Never touch node_modules and package-lock.json
* To ignite our app:
Igniting Our App! ( Namaste-React ) 5
npx parcel index.html
npx means ‘execute using npm’
index.html is the entry point
* Hot Module Replacement (HMR):
It means that parcel will keep a track of all the files which
you are updating.
There is File Watcher Algorithm (written in C++). It keeps
track of all the files which are changing realtime and it
tells the server to reload.
These are all done by PARCEL
* parcel-cache:
Parcel caches code all the time.
When we run the application, a build is created which takes
some time in ms.
If we make any code changes and save the application, another
build will be triggered which might take even less time than
the previous build.
This reduction of time is due to parcel cache.
Parcel immediately loads the code from the cache every time
there is a subsequent build.
On the very first build parcel creates a folder .parcelcache where it stores the caches in binary codeformat.
Parcel gives faster build, faster developer experience
because of caching.
Igniting Our App! ( Namaste-React ) 6
* dist:
It keeps the files minified for us.
When bundler builds the app, the build goes into a folder
called dist.
The `/dist` folder contains the minimized and optimised
version the source code.
Along with the minified code, the /dist folder also comprises
of all the compiled modules that may or may not be used with
other systems.
When we run command:
npx parcel index.html
This will create a faster development version of our project
and serves it on the server.
When I tell parcel to make a production build:
npx parcel build index.html
Igniting Our App! ( Namaste-React ) 7
It creates a lot of things, minify your file.
And the parcel will build all the production files to
the dist folder.
* Parcel features at a glance:
Hot Module Replacement (HMR)
File Watcher Algorithm - C++
Bundling
Minify Code
Cleaning our code
Dev and production build
Igniting Our App! ( Namaste-React ) 8
Super fast build algorithm
Image Optimization
Caching while development
Compression
Compatible with older browser versions
Https on dev
Image Optimization
Port No
Consistency Hashing Algorithm
Zero Config
Tree Shaking
* Transitive Dependencies :
We have our package manager which takes care of our
transitive dependencies of our code.
If we’ve to build a production ready app which uses all
optimisations (like minify, bundling, compression, etc), we
need to do all these.
But we can’t do this alone, we need some dependencies on it.
Those dependencies are also dependent on other dependencies.
Igniting Our App! ( Namaste-React ) 9
* Browserslist:
Browserslist is a tool that specifies which browsers should
be supported/compatible in your frontend app.
It makes our code compatible for a lot of browsers.
In package.json file do:
Igniting Our App! ( Namaste-React ) 10
* Tree Shaking:
Tree shaking is a process of removing the unwanted code that
we do not use while developing the application.
In computing, tree shaking is a dead code elimination
technique that is applied when optimizing code.